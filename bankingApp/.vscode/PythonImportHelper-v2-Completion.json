[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "importPath": "bankingApp.models",
        "description": "bankingApp.models",
        "isExtraImport": true,
        "detail": "bankingApp.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "bankingApp.models",
        "description": "bankingApp.models",
        "isExtraImport": true,
        "detail": "bankingApp.models",
        "documentation": {}
    },
    {
        "label": "Loan",
        "importPath": "bankingApp.models",
        "description": "bankingApp.models",
        "isExtraImport": true,
        "detail": "bankingApp.models",
        "documentation": {}
    },
    {
        "label": "Manager",
        "importPath": "bankingApp.models",
        "description": "bankingApp.models",
        "isExtraImport": true,
        "detail": "bankingApp.models",
        "documentation": {}
    },
    {
        "label": "Transcations",
        "importPath": "bankingApp.models",
        "description": "bankingApp.models",
        "isExtraImport": true,
        "detail": "bankingApp.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "bankingApp.models",
        "description": "bankingApp.models",
        "isExtraImport": true,
        "detail": "bankingApp.models",
        "documentation": {}
    },
    {
        "label": "paymentLoan",
        "importPath": "bankingApp.models",
        "description": "bankingApp.models",
        "isExtraImport": true,
        "detail": "bankingApp.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "django.db",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db",
        "description": "django.db",
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "django.conf",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.conf",
        "description": "django.conf",
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "importPath": "myproject.settings",
        "description": "myproject.settings",
        "isExtraImport": true,
        "detail": "myproject.settings",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "BankingappConfig",
        "kind": 6,
        "importPath": "apps",
        "description": "apps",
        "peekOfCode": "class BankingappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'bankingApp'",
        "detail": "apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class User(models.Model):\n    email = models.EmailField(unique=True,max_length=30)\n    password = models.CharField(max_length=30)\n    role = models.CharField(max_length=30)\n    created_at= models.DateTimeField(auto_now_add=True,blank=False)\n    update_at = models.DateTimeField(auto_now=True,blank=False)\n    def __str__(self):\n        return self.email\n# bank manager table \nclass Manager(models.Model):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Manager",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Manager(models.Model):\n    user_id = models.ForeignKey(User,on_delete=models.CASCADE)\n    branch = models.CharField(max_length=30)\n    firstname = models.CharField(max_length=30)\n    lastname = models.CharField(max_length=30)\n    mobile_no = models.CharField(max_length=30)\n    address = models.CharField(max_length=60)\n    country = models.CharField(max_length=30)\n    state = models.CharField(max_length=30)\n    city = models.CharField(max_length=20,null=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Customer(models.Model):\n    acc_no = models.IntegerField(primary_key = True, default=None)\n    user_id = models.ForeignKey(User,on_delete=models.CASCADE)\n    manager_id = models.ForeignKey(Manager,on_delete=models.CASCADE,null=True)\n    account_number = models.CharField(max_length=30,null=True)\n    firstname = models.CharField(max_length=30)\n    lastname = models.CharField(max_length=30)\n    mobile_no = models.CharField(max_length=30)\n    gender = models.CharField(max_length=20)\n    date = models.CharField(max_length=20,null=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class BankAccount(models.Model):\n    manager_id = models.ForeignKey(Manager,on_delete=models.CASCADE)\n    customer_id = models.ForeignKey(Customer,on_delete=models.CASCADE)\n    account_type = models.CharField(max_length=30)\n    account_number = models.CharField(max_length=30,null=True) \n    aadhar_card_number = models.CharField(max_length=16)\n    pan_card_number = models.CharField(max_length=16)\n    aadhar_card = models.FileField(upload_to=\"media/images/\",default=\"media/no-image.png\")\n    pan_card = models.FileField(upload_to=\"media/images/\",default=\"media/no-image.png\")\n    nominee_name = models.CharField(max_length=30)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Transcations",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Transcations(models.Model):\n    bank_id = models.ForeignKey(BankAccount,on_delete=models.CASCADE)\n    user_id = models.ForeignKey(User, on_delete=models.CASCADE)\n    customer_id = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    tpassword = models.CharField(max_length=300)\n    account_number = models.CharField(max_length=30,null=True)\n    title = models.CharField(max_length=60)\n    transcations_type = models.CharField(max_length=60)\n    amount = models.IntegerField(default=500)\n    created_at= models.CharField(max_length=60)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Loan",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Loan(models.Model):\n   manager_id = models.ForeignKey(Manager,on_delete=models.CASCADE)\n   customer_id = models.ForeignKey(Customer, on_delete=models.CASCADE)\n   account_number = models.CharField(max_length=30,null=True)\n   loan_type = models.CharField(max_length=60)\n   loan_amount = models.CharField(max_length=60)\n   interest_rate = models.CharField(max_length=60,null=True)\n   periods = models.CharField(max_length=60)\n   interest_amount = models.CharField(max_length=60)\n   monthli_amount = models.CharField(max_length=60)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "paymentLoan",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class paymentLoan(models.Model):\n    manager_id = models.ForeignKey(Manager,on_delete=models.CASCADE)\n    customer_id = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    account_number = models.CharField(max_length=30,null=True)\n    paymentDate = models.CharField(max_length=60)\n    paymentAmount = models.CharField(max_length=60)\n    loanBalance = models.CharField(max_length=60)\n    def __str__(self):\n        return self.account_number",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "urls",
        "description": "urls",
        "peekOfCode": "urlpatterns = [\n   path('', views.home, name='home'),\n   path('register/', views.register, name='register'),\n   path('login/',views.login, name=\"login1\"),\n   path('logout/', views.logout,name=\"logout\"),\n   path('profile/',views.profile,name=\"profile\"),\n   path('profile-password-change/',views.profile_password_change, name=\"profile-password-change\"),\n   path('addcustomer/',views.add_customer,name=\"addcustomer\"),\n   path('pic-profile/',views.pic_profile,name=\"pic-profile\"),\n   path('add-bank-account/',views.add_bank_account, name=\"add-bank-account\"),",
        "detail": "urls",
        "documentation": {}
    },
    {
        "label": "hom",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def home (request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session[\"email\"])\n        if uid.role == \"Manager\":\n            mid = Manager.objects.get(user_id = uid)\n            context = {\n            \"uid\":uid,\n            \"mid\":mid,\n            }\n            print(\"====> image : \",mid.pic.url)",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def register(request):\n    try:\n        if request.POST:\n            user_id = User.objects.create(\n                email = request.POST[\"email\"],\n                password = request.POST[\"password\"],\n                role = \"Manager\" ,\n                )\n            mid = Manager.objects.create(\n                user_id = user_id,",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def login(request):\n    # manager login\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        context = {\n            \"uid\":uid,\n            \"mid\":mid,\n        }\n        return render(request,\"bankingApp/index.html\",context)",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def logout(request):\n    if \"email\" in request.session:\n        del request.session['email']\n        return render(request,\"bankingApp/login.html\")\ndef profile(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session[\"email\"])\n        mid = Manager.objects.get(user_id = uid)\n        context = {\n            \"uid\":uid,",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def profile(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session[\"email\"])\n        mid = Manager.objects.get(user_id = uid)\n        context = {\n            \"uid\":uid,\n            \"mid\":mid,\n        }\n        return render(request,\"bankingApp/profile.html\",context)\ndef profile_password_change(request):",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "profile_password_change",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def profile_password_change(request):\n    if \"email\" in request.session:\n        if request.POST:\n            uid = User.objects.get(email = request.session[\"email\"])\n            mid = Manager.objects.get(user_id = uid)\n            password = request.POST[\"password\"]\n            newpassword = request.POST[\"newpassword\"]\n            if password == uid.password:\n                uid.password = newpassword\n                uid.save()#save",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "add_customer",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def add_customer(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session[\"email\"])\n        mid = Manager.objects.get(user_id = uid)\n        context = {\n                \"uid\":uid,\n                \"mid\":mid,\n        }\n        return render(request,'bankingApp/add_customer.html',context)\n    else:",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "pic_profile",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def pic_profile(requsest):\n    if \"email\" in requsest.session:\n       uid = User.objects.get(email = requsest.session[\"email\"])\n       mid = Manager.objects.get(user_id = uid)\n       try:\n           if requsest.POST:\n                firstname = requsest.POST[\"firstname\"]\n                lastname = requsest.POST['lastname']\n                country = requsest.POST['country']\n                state = requsest.POST['state']",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "add_bank_account",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def add_bank_account(request):\n    if \"email\" in request.session:\n        try:\n            if request.POST:\n                uid = User.objects.get(email = request.session['email'])\n                mid = Manager.objects.get(user_id = uid)\n                accnum =random.randint(111111111111,999999999999)\n                account_number = accnum\n                #create Customer\n                user_id = User.objects.create(",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "all_customers",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def all_customers(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        call = Customer.objects.all()\n        context = {\n                \"uid\":uid,\n                \"mid\":mid,\n                \"call\":call,\n        }",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "emi",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def emi(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        context = {\n                \"uid\":uid,\n                \"mid\":mid,  \n        }\n        return render(request,'bankingApp/emi.html',context)\ndef emi_calc(request):",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "emi_calc",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def emi_calc(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        try:\n            if request.POST:\n                amount = int(request.POST['amount'])\n                rate = int(request.POST['rate'])\n                periods = int(request.POST['periods'])\n                total = amount*rate*periods/100",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "loan",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def loan(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        call = Customer.objects.all()\n        context = {\n                \"uid\":uid,\n                \"mid\":mid,\n                \"call\":call,\n        }",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "add_loan",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def add_loan(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        try:       \n            if request.POST:\n                account_number = request.POST['account_number']\n                loan_type = request.POST['loan_type']\n                loan_amount = int(request.POST['loan_amount'])\n                tranpassword = request.POST['tranpassword']",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Loan_Repayment",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def Loan_Repayment(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        context = {\n                \"uid\":uid,\n                \"mid\":mid,\n            }\n        return render(request,'bankingApp/Repayment_loan.html',context)\ndef add_Repayment(request):",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "add_Repayment",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def add_Repayment(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        try:\n            if request.POST:\n                account_number = request.POST[\"account_number\"]\n                paymentAmount = int(request.POST[\"paymentAmount\"])\n                tranpassword = request.POST['tranpassword']\n                cid  = Customer.objects.get(acc_no = account_number)",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "loan_passbook",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def loan_passbook(request,pk):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        cid = Customer.objects.get(acc_no = pk)\n        bid = BankAccount.objects.get(customer_id = cid.acc_no)\n        pid  = paymentLoan.objects.all()    \n        if cid.acc_no:\n            pid =pid.filter(Q(account_number__icontains = cid.acc_no))    \n        context = {",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "loan_View",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def loan_View(request,pk):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        try:\n            lid = Loan.objects.get(customer_id = pk)\n            context = {\n                        \"uid\":uid,\n                        \"mid\":mid,    \n                        \"lid\":lid,",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "view_customer",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def view_customer(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        call = Customer.objects.all()\n        context = {\n                \"uid\":uid,\n                \"mid\":mid,\n                \"call\":call,\n        }",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "filter",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def filter(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)    \n        try:\n            if request.POST:\n                accno = request.POST['accno']\n                cid = Customer.objects.all()\n            if accno:\n                cidfilter =cid.filter(Q(account_number__icontains = accno))",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "view_profile",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def view_profile(request,pk):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        cid = Customer.objects.get(acc_no=pk)\n        bid = BankAccount.objects.get(customer_id = cid.acc_no)\n        context = {\n                    \"uid\":uid,\n                    \"mid\":mid,    \n                    \"cid\":cid,",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "edit_customers_function",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def edit_customers_function(request,pk):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        customer_edit = Customer.objects.get(acc_no=pk)\n        bacc = BankAccount.objects.get(customer_id = customer_edit.acc_no)\n        context = {\n                \"uid\":uid,\n                \"mid\":mid,\n                \"customer_edit\":customer_edit,",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "update_customers_function",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def update_customers_function(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        if request.POST:\n            cbid = request.POST['accno']\n            password = request.POST['password']\n            newpassword = request.POST['newpassword']\n            id = request.POST['id']\n            app_password = request.POST['app_password']",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "delete_customers_function",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def delete_customers_function(request,pk):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        cid = Customer.objects.get(acc_no = pk)\n        cid.delete()\n        call =Customer.objects.all()\n        context = {\n            'uid':uid,\n            'mid':mid,",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "transaction",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def transaction(request,pk):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        cid = Customer.objects.get(acc_no = pk)\n        context = {\n            'uid':uid,\n            'mid':mid,\n            'cid':cid,\n        }",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "deposit_withdraw",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def deposit_withdraw(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        try:\n            if request.POST:\n                accno = request.POST['accno']\n                title = request.POST['title']\n                transcations_type = request.POST['transcation_type']\n                tpassword = request.POST['tpassword']",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Passbook",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def Passbook(request,pk):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        cid = Customer.objects.get(acc_no = pk)\n        bid = BankAccount.objects.get(customer_id = cid.acc_no)\n        tid = Transcations.objects.all()\n        if cid.acc_no:\n            tid =tid.filter(Q(account_number__icontains = cid.acc_no))\n        context = {",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "transfer_money",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def transfer_money(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        context = {\n                \"uid\":uid,\n                'mid':mid,\n            }\n        return render(request,\"bankingApp/transferamount.html\",context)\ndef TRANFER_MONEY1(request):",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "TRANFER_MONEY1",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def TRANFER_MONEY1(request):\n    if 'email' in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        mid = Manager.objects.get(user_id = uid)\n        try:\n            if request.POST:\n                account_number1 = request.POST['account_number1']\n                account_number2 = request.POST['account_number2']\n                title = request.POST['title']\n                tpassword = request.POST['tpassword']",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "custpassbook",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def custpassbook(request):\n    if 'email' in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        bid  = BankAccount.objects.get(customer_id = cid.acc_no)\n        tid  = Transcations.objects.all()\n        if cid.acc_no:\n            tid =tid.filter(Q(account_number__icontains = cid.acc_no))\n        context={\n            'uid':uid,",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "cust_profile",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def cust_profile(request):\n    if 'email' in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        bid  = BankAccount.objects.get(customer_id = cid.acc_no)\n        context={\n            'uid':uid,\n            'cid':cid,\n            'bid':bid,\n        }",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "cust_profile_password_change",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def cust_profile_password_change(request):\n    if 'email' in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        bid  = BankAccount.objects.get(customer_id = cid.acc_no)\n        try:\n            if request.POST:\n                password = request.POST[\"password\"]\n                newpassword = request.POST[\"newpassword\"]\n                if password == uid.password:",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "custTransfer",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def custTransfer(request):\n    if 'email' in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        bid  = BankAccount.objects.get(customer_id = cid.acc_no) \n        context = {\n                \"uid\":uid,\n                \"bid\":bid,\n                'cid':cid,\n            }",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "transfer_amount",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def transfer_amount(request):\n     if 'email' in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        try:\n            if request.POST:\n                accno = request.POST['accno']\n                account_number2 = request.POST['account_number2']\n                title = request.POST['title']\n                tpassword = request.POST['tpassword']",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Loan_Repayment_cust",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def Loan_Repayment_cust(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        context = {\n                \"uid\":uid,\n                \"cid\":cid,\n            }\n        return render(request,'bankingApp/Repayment_loan_cust.html',context)\ndef add_Repayment_cust(request):",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "add_Repayment_cust",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def add_Repayment_cust(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        mid = cid.manager_id\n        try:\n            if request.POST:\n                account_number = request.POST[\"account_number\"]\n                paymentAmount = int(request.POST[\"paymentAmount\"])\n                tranpassword = request.POST['tranpassword']",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "loan_passbook_cust",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def loan_passbook_cust(request,pk):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(acc_no = pk)\n        bid = BankAccount.objects.get(customer_id = cid.acc_no)\n        pid  = paymentLoan.objects.all()    \n        if cid.acc_no:\n            pid =pid.filter(Q(account_number__icontains = cid.acc_no))    \n        context = {\n            'uid':uid,",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Loan_details_cust",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def Loan_details_cust(request,pk):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        try:\n            lid  = Loan.objects.get(customer_id = pk )\n            context = {\n                \"uid\":uid,\n                \"cid\":cid,\n                \"lid\":lid,",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Dashboard",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def Dashboard(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        call = Customer.objects.all()\n        context = {\n            \"uid\":uid,\n            \"cid\":cid,\n            \"call\":call,\n        }",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "emi_cust",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def emi_cust(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        context = {\n            \"uid\":uid,\n            \"cid\":cid,\n        }\n        return render (request,\"bankingApp/emi_cust.html\",context)\ndef emi_calc_cust(request):",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "emi_calc_cust",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def emi_calc_cust(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        try:\n            if request.POST:\n                amount = int(request.POST['amount'])\n                rate = int(request.POST['rate'])\n                periods = int(request.POST['periods'])\n                total = amount*rate*periods/100",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "app_password",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def app_password(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        context = {\n                    \"uid\":uid,\n                    \"cid\":cid, \n            }\n        return render(request,'bankingApp/app_password.html',context)\ndef change_password(request):",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def change_password(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        try:\n            if request.POST:\n                id = request.POST['id']\n                password = request.POST['password']\n                newpassword = request.POST['newpassword']\n                uidpass = User.objects.get(id = id)",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "tra_password",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def tra_password(request,pk):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        bid = BankAccount.objects.get(customer_id = pk)\n        context = {\n                    \"uid\":uid,\n                    \"cid\":cid, \n                    \"bid\":bid,\n            }",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "tran_change_password",
        "kind": 2,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "def tran_change_password(request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session['email'])\n        cid = Customer.objects.get(user_id = uid)\n        try:\n            if request.POST:\n                id = request.POST['id']\n                password = request.POST['password']\n                newpassword = request.POST['newpassword']\n                bidtpass = BankAccount.objects.get(customer_id = id)",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "named_tuple",
        "kind": 5,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "named_tuple = time.localtime()\ntime_string = time.strftime(\"%d/%m/%y, %I:%M:%S\",named_tuple)\n# Create your views here.\ndef home (request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session[\"email\"])\n        if uid.role == \"Manager\":\n            mid = Manager.objects.get(user_id = uid)\n            context = {\n            \"uid\":uid,",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "time_string",
        "kind": 5,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "time_string = time.strftime(\"%d/%m/%y, %I:%M:%S\",named_tuple)\n# Create your views here.\ndef home (request):\n    if \"email\" in request.session:\n        uid = User.objects.get(email = request.session[\"email\"])\n        if uid.role == \"Manager\":\n            mid = Manager.objects.get(user_id = uid)\n            context = {\n            \"uid\":uid,\n            \"mid\":mid,",
        "detail": "views",
        "documentation": {}
    }
]